package com.brandoo.controller;

import com.brandoo.model.Order;
import com.brandoo.model.OrderItem;
import com.brandoo.model.OrderStatus;
import com.brandoo.service.OrderService;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Iterator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
* Generated by Springboot-3layer-Generator at Nov 7, 2022, 9:05:57 AM
*/
@RestController
@RequestMapping("/order/")
public class OrderController implements CrudController<Order,java.lang.Integer>{

    @Autowired
    private OrderService service;

    @Override
    public ResponseEntity<Order> create(@RequestBody Order entity) {
    	for (Iterator iterator = entity.getOrderItems().iterator(); iterator.hasNext();) {
			OrderItem oi = (OrderItem) iterator.next();
			if(oi.getItemImage()!=null && oi.getItemImage().length()>0)
				oi.setImage(oi.getItemImage().getBytes());
		}
    	if(entity.getOrderStatusId()!=null) {
	    	if(entity.getOrderStatus()==null)
	    		entity.setOrderStatus(new OrderStatus());
	    	entity.getOrderStatus().setId(entity.getOrderStatusId());
	    	System.out.println(entity.getId());
    	}
        //System.out.println("Order Item selling price: "+entity.getOrderItems().get(0).getSellingPrice());
        Order createdOrder = service.create(entity);
        if(createdOrder!=null) {
        	if(createdOrder.getOrderStatus()!=null) {
        		System.out.println("order status not null --------------");
        		createdOrder.setOrderStatusId(createdOrder.getOrderStatus().getId());
        		createdOrder.setOrderStatusName(createdOrder.getOrderStatus().getDescription());
        		for (Iterator iterator = createdOrder.getOrderItems().iterator(); iterator.hasNext();) {
        			OrderItem oi = (OrderItem) iterator.next();

        			if(oi.getImage()!=null && oi.getImage().length >0) {
        				String s = new String(oi.getImage(), StandardCharsets.UTF_8);          			  
        				oi.setItemImage(s);
        			}
        		}
        	}
        	
        }
        return ResponseEntity.ok(createdOrder);
    }

    @Override
    public ResponseEntity<Order> update(@RequestBody Order entity) {
    	System.out.println("Inside Update Order");
    	for (Iterator iterator = entity.getOrderItems().iterator(); iterator.hasNext();) {
			OrderItem oi = (OrderItem) iterator.next();
			if(oi.getItemImage()!=null && oi.getItemImage().length()>0)
				oi.setImage(oi.getItemImage().getBytes());
    		System.out.println("Image after convert --------------" +oi.getItemImage());
		}
    	Order updatedOrder = service.update(entity);
        if(updatedOrder!=null) {
        	if(updatedOrder.getOrderStatus()!=null) {
        		System.out.println("order status not null --------------");
        		updatedOrder.setOrderStatusId(updatedOrder.getOrderStatus().getId());
        		updatedOrder.setOrderStatusName(updatedOrder.getOrderStatus().getDescription());
        		for (Iterator iterator = updatedOrder.getOrderItems().iterator(); iterator.hasNext();) {
        			OrderItem oi = (OrderItem) iterator.next();

        			if(oi.getImage()!=null && oi.getImage().length >0) {
        				String s = new String(oi.getImage(), StandardCharsets.UTF_8);          			  oi.setItemImage(s);
        			}
        		}
        	}
        	
        }
        return ResponseEntity.ok(updatedOrder);
    }

    @Override
    public ResponseEntity<Page<Order>> read(
            @RequestBody Order entity,
            @RequestParam("page") Integer page,
            @RequestParam("size") Integer size) {
        Pageable pageable = PageRequest.of(page,size);
       Page<Order> result =  service.read(entity,pageable);
       //String s = new String(result.getContent().get(0).getOrderItems().get(0).getImage(), StandardCharsets.UTF_8);  
       //System.out.println(s);
        return ResponseEntity.ok(result);
        
    }

    @Override
    public ResponseEntity<Order> readOne(@PathVariable("id") java.lang.Integer primaryKey) {
    	System.out.println("Inside Read one -------- >");
    	Order order = service.readOne(primaryKey);
    	for (Iterator iterator = order.getOrderItems().iterator(); iterator.hasNext();) {
			OrderItem oi = (OrderItem) iterator.next();

			if(oi.getImage()!=null && oi.getImage().length >0) {
				String s = new String(oi.getImage(), StandardCharsets.UTF_8);          			  oi.setItemImage(s);
			}
		}
        return ResponseEntity.ok(order);

    }

    @Override
    public void delete(java.lang.Integer primaryKey) {
        service.delete(primaryKey);
    }
}